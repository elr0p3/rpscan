name: sniff_port
version: "0.1.0"
author: r0p3 <mail>
about: Sniff open ports
args:
    - address:
        # short: a
        # long: address
        takes_value: true
        value_name: IPv4_ADDRESS
        required: true
        # last: true
        # index: 1
        help: Target's IPv4 address to scan
        # hidden_short_help: true
    - threads:
        short: t
        long: threads
        takes_value: true
        value_name: NUM_THREADS
        default_value: "6"
        help: Number of threads to use
    - ports:
        short: p
        long: ports
        takes_value: true
        value_name: PORTS
        default_value: "1-65535"
        allow_hyphen_values: true
        use_delimiter: true
        value_delimiter: ","
        help: Ports to scan


# fn main() {
    # let yaml = load_yaml!("../files/input_params.yml");
    # let app = App::from_yaml(yaml)
        # .arg(
            # clap::Arg::with_name("nuevo")
                # .short("n")
                # .takes_value(true)
                # // .last(true)
                # .use_delimiter(true)
                # .value_delimiter(",")
            # )
        # .get_matches();
    # println!("Address: {}", app.value_of("address").unwrap());
    # println!("Threads: {}", app.value_of("threads").unwrap());
    # println!("Ports: {}", app.value_of("ports").unwrap());
    # println!("Ports: {:?}", app.values_of("ports").unwrap().collect::<Vec<&str>>());

    # // println!("Nuevo: {:?}", app.values_of("nuevo").unwrap().collect::<Vec<&str>>());

    # // println!("addr: {:?}", app.subcommand_matches("address").unwrap());
    # println!("MARIKONG");
# }
